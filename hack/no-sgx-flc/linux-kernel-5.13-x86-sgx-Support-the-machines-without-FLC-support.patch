From fc06bc72b99aaf125586bfe91986303cee3456c8 Mon Sep 17 00:00:00 2001
From: Shirong Hao <shirong@linux.alibaba.com>
Date: Mon, 14 Feb 2022 14:41:11 +0800
Subject: [PATCH] x86/sgx: Support the machines without FLC support

There are still lots of SGX machines without FLC support deployed
in filed. These machines eventually needs to be migrated to be supported
by SGX in-tree driver which is product-ready and well-maintained.

This patch targets to address the gap between no-FLC machine and the
support of SGX in-tree driver.

Signed-off-by: Jia Zhang <zhang.jia@linux.alibaba.com>
Signed-off-by: Shirong Hao <shirong@linux.alibaba.com>

diff --git a/arch/x86/include/uapi/asm/sgx.h b/arch/x86/include/uapi/asm/sgx.h
index 9690d6899ad9..647d7f6146d5 100644
--- a/arch/x86/include/uapi/asm/sgx.h
+++ b/arch/x86/include/uapi/asm/sgx.h
@@ -25,6 +25,8 @@ enum sgx_page_flags {
 	_IOWR(SGX_MAGIC, 0x01, struct sgx_enclave_add_pages)
 #define SGX_IOC_ENCLAVE_INIT \
 	_IOW(SGX_MAGIC, 0x02, struct sgx_enclave_init)
+#define SGX_IOC_ENCLAVE_INIT_WITH_TOKEN \
+	_IOW(SGX_MAGIC, 0x02, struct sgx_enclave_init_with_token)
 #define SGX_IOC_ENCLAVE_PROVISION \
 	_IOW(SGX_MAGIC, 0x03, struct sgx_enclave_provision)
 
@@ -65,6 +67,19 @@ struct sgx_enclave_init {
 	__u64 sigstruct;
 };
 
+/**
+ * struct sgx_enclave_init_with_token - parameter structure for the
+ *                                      %SGX_IOC_ENCLAVE_INIT_WITH_TOKEN ioctl
+ * @addr:	address in the ELRANGE
+ * @sigstruct:	address for the SIGSTRUCT data
+ * @einittoken: address for the EINITTOKEN data
+ */
+struct sgx_enclave_init_with_token {
+	__u64 addr;
+	__u64 sigstruct;
+	__u64 einittoken;
+};
+
 /**
  * struct sgx_enclave_provision - parameter structure for the
  *				  %SGX_IOC_ENCLAVE_PROVISION ioctl
diff --git a/arch/x86/kernel/cpu/feat_ctl.c b/arch/x86/kernel/cpu/feat_ctl.c
index da696eb4821a..794eaab433f6 100644
--- a/arch/x86/kernel/cpu/feat_ctl.c
+++ b/arch/x86/kernel/cpu/feat_ctl.c
@@ -107,6 +107,8 @@ void init_ia32_feat_ctl(struct cpuinfo_x86 *c)
 	bool enable_sgx_kvm = false, enable_sgx_driver = false;
 	bool tboot = tboot_enabled();
 	bool enable_vmx;
+	bool enable_sgx;
+
 	u64 msr;
 
 	if (rdmsrl_safe(MSR_IA32_FEAT_CTL, &msr)) {
@@ -118,7 +120,14 @@ void init_ia32_feat_ctl(struct cpuinfo_x86 *c)
 	enable_vmx = cpu_has(c, X86_FEATURE_VMX) &&
 		     IS_ENABLED(CONFIG_KVM_INTEL);
 
-	if (cpu_has(c, X86_FEATURE_SGX) && IS_ENABLED(CONFIG_X86_SGX)) {
+	/*
+	 * Enable SGX if and only if the kernel supports SGX and Launch Control
+	 * is supported.
+	 */
+	enable_sgx = cpu_has(c, X86_FEATURE_SGX) &&
+		     IS_ENABLED(CONFIG_X86_SGX);
+
+	if (enable_sgx) {
 		/*
 		 * Separate out SGX driver enabling from KVM.  This allows KVM
 		 * guests to use SGX even if the kernel SGX driver refuses to
@@ -150,7 +159,7 @@ void init_ia32_feat_ctl(struct cpuinfo_x86 *c)
 			msr |= FEAT_CTL_VMX_ENABLED_INSIDE_SMX;
 	}
 
-	if (enable_sgx_kvm || enable_sgx_driver) {
+	if (enable_sgx) {
 		msr |= FEAT_CTL_SGX_ENABLED;
 		if (enable_sgx_driver)
 			msr |= FEAT_CTL_SGX_LC_ENABLED;
@@ -178,7 +187,7 @@ void init_ia32_feat_ctl(struct cpuinfo_x86 *c)
 
 update_sgx:
 	if (!(msr & FEAT_CTL_SGX_ENABLED)) {
-		if (enable_sgx_kvm || enable_sgx_driver)
+		if (enable_sgx)
 			pr_err_once("SGX disabled by BIOS.\n");
 		clear_cpu_cap(c, X86_FEATURE_SGX);
 		return;
diff --git a/arch/x86/kernel/cpu/sgx/driver.c b/arch/x86/kernel/cpu/sgx/driver.c
index aa9b8b868867..91a28fa72479 100644
--- a/arch/x86/kernel/cpu/sgx/driver.c
+++ b/arch/x86/kernel/cpu/sgx/driver.c
@@ -150,9 +150,6 @@ int __init sgx_drv_init(void)
 	u64 xfrm_mask;
 	int ret;
 
-	if (!cpu_feature_enabled(X86_FEATURE_SGX_LC))
-		return -ENODEV;
-
 	cpuid_count(SGX_CPUID, 0, &eax, &ebx, &ecx, &edx);
 
 	if (!(eax & 1))  {
diff --git a/arch/x86/kernel/cpu/sgx/ioctl.c b/arch/x86/kernel/cpu/sgx/ioctl.c
index 83df20e3e633..8938ee16660d 100644
--- a/arch/x86/kernel/cpu/sgx/ioctl.c
+++ b/arch/x86/kernel/cpu/sgx/ioctl.c
@@ -111,6 +111,8 @@ static int sgx_encl_create(struct sgx_encl *encl, struct sgx_secs *secs)
 	encl->size = secs->size;
 	encl->attributes = secs->attributes;
 	encl->attributes_mask = SGX_ATTR_DEBUG | SGX_ATTR_MODE64BIT | SGX_ATTR_KSS;
+	if (sgx_no_flc)
+		encl->attributes_mask |= SGX_ATTR_EINITTOKENKEY;
 
 	/* Set only after completion, as encl->lock has not been taken. */
 	set_bit(SGX_ENCL_CREATED, &encl->flags);
@@ -604,15 +606,26 @@ static long sgx_ioc_enclave_init(struct sgx_encl *encl, void __user *arg)
 {
 	struct sgx_sigstruct *sigstruct;
 	struct sgx_enclave_init init_arg;
+	struct sgx_enclave_init_with_token init_arg_with_token;
 	void *token;
+	__u64 sig_addr;
 	int ret;
 
 	if (!test_bit(SGX_ENCL_CREATED, &encl->flags) ||
 	    test_bit(SGX_ENCL_INITIALIZED, &encl->flags))
 		return -EINVAL;
 
-	if (copy_from_user(&init_arg, arg, sizeof(init_arg)))
-		return -EFAULT;
+	if (!sgx_no_flc) {
+		if (copy_from_user(&init_arg, arg, sizeof(init_arg)))
+			return -EFAULT;
+
+		sig_addr = init_arg.sigstruct;
+	} else {
+		if (copy_from_user(&init_arg_with_token, arg, sizeof(init_arg_with_token)))
+			return -EFAULT;
+
+		sig_addr = init_arg_with_token.sigstruct;
+	}
 
 	/*
 	 * 'sigstruct' must be on a page boundary and 'token' on a 512 byte
@@ -623,11 +636,18 @@ static long sgx_ioc_enclave_init(struct sgx_encl *encl, void __user *arg)
 	if (!sigstruct)
 		return -ENOMEM;
 
+	if (copy_from_user(sigstruct, (void __user *)sig_addr,
+			   sizeof(*sigstruct))) {
+		ret = -EFAULT;
+		goto out;
+	}
+
 	token = (void *)((unsigned long)sigstruct + PAGE_SIZE / 2);
-	memset(token, 0, SGX_LAUNCH_TOKEN_SIZE);
 
-	if (copy_from_user(sigstruct, (void __user *)init_arg.sigstruct,
-			   sizeof(*sigstruct))) {
+	if (!sgx_no_flc)
+		memset(token, 0, SGX_LAUNCH_TOKEN_SIZE);
+	else if (copy_from_user(token, (void __user *)init_arg_with_token.einittoken,
+				SGX_LAUNCH_TOKEN_SIZE)) {
 		ret = -EFAULT;
 		goto out;
 	}
@@ -690,6 +710,7 @@ long sgx_ioctl(struct file *filep, unsigned int cmd, unsigned long arg)
 		ret = sgx_ioc_enclave_add_pages(encl, (void __user *)arg);
 		break;
 	case SGX_IOC_ENCLAVE_INIT:
+	case SGX_IOC_ENCLAVE_INIT_WITH_TOKEN:
 		ret = sgx_ioc_enclave_init(encl, (void __user *)arg);
 		break;
 	case SGX_IOC_ENCLAVE_PROVISION:
diff --git a/arch/x86/kernel/cpu/sgx/main.c b/arch/x86/kernel/cpu/sgx/main.c
index 63d3de02bbcc..c5b2935703e2 100644
--- a/arch/x86/kernel/cpu/sgx/main.c
+++ b/arch/x86/kernel/cpu/sgx/main.c
@@ -16,6 +16,7 @@
 #include "encl.h"
 #include "encls.h"
 
+bool sgx_no_flc = false;
 struct sgx_epc_section sgx_epc_sections[SGX_MAX_EPC_SECTIONS];
 static int sgx_nr_epc_sections;
 static struct task_struct *ksgxd_tsk;
@@ -741,8 +742,11 @@ void sgx_update_lepubkeyhash(u64 *lepubkeyhash)
 
 	WARN_ON_ONCE(preemptible());
 
-	for (i = 0; i < 4; i++)
-		wrmsrl(MSR_IA32_SGXLEPUBKEYHASH0 + i, lepubkeyhash[i]);
+	if (!sgx_no_flc) {
+		for (i = 0; i < 4; i++)
+			wrmsrl(MSR_IA32_SGXLEPUBKEYHASH0 + i, lepubkeyhash[i]);
+	}
+
 }
 
 const struct file_operations sgx_provision_fops = {
@@ -798,6 +802,9 @@ static int __init sgx_init(void)
 	if (!cpu_feature_enabled(X86_FEATURE_SGX))
 		return -ENODEV;
 
+	if (!cpu_feature_enabled(X86_FEATURE_SGX_LC))
+		sgx_no_flc = true;
+
 	if (!sgx_page_cache_init())
 		return -ENOMEM;
 
diff --git a/arch/x86/kernel/cpu/sgx/sgx.h b/arch/x86/kernel/cpu/sgx/sgx.h
index 4628acec0009..077232b2f3b5 100644
--- a/arch/x86/kernel/cpu/sgx/sgx.h
+++ b/arch/x86/kernel/cpu/sgx/sgx.h
@@ -55,6 +55,7 @@ struct sgx_epc_section {
 	struct sgx_numa_node *node;
 };
 
+extern bool sgx_no_flc;
 extern struct sgx_epc_section sgx_epc_sections[SGX_MAX_EPC_SECTIONS];
 
 static inline unsigned long sgx_get_epc_phys_addr(struct sgx_epc_page *page)
-- 
2.27.0

