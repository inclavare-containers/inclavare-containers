name: Run rune with Occlum

# Controls when the action will run. Triggers the workflow on pull request labeled testing-before-checkin.
on:
  pull_request_target:
    types: labeled

jobs:
  rune_occlum:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'testing-before-checkin') }}
    runs-on: ${{ matrix.sgx }}
    strategy:
      matrix:
        sgx: [[self-hosted, SGX1, commit], [self-hosted, SGX2, commit]]
        tag: [ubuntu18.04, centos8.2, alinux2]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: refs/pull/${{ github.event.pull_request.number }}/merge

    - name: Install enable_rdfsbase
      run: |
        if [ ! $(lsmod | grep enable_rdfsbase) ]; then
          pushd /tmp
          rm -rf enable_rdfsbase.zip enable_rdfsbase*
          wget https://github.com/occlum/enable_rdfsbase/archive/master.zip -O enable_rdfsbase.zip && unzip enable_rdfsbase.zip
          pushd enable_rdfsbase-master
          make && make install
          popd
          popd
        fi

    - name: Prepare work
      run: echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV

    - name: Create container
      run: |
        if [ '${{ matrix.sgx }}' = '[self-hosted, SGX1]' ]; then
          rune_test=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 --device /dev/isgx -v $GITHUB_WORKSPACE:/root/inclavare-containers rune-test:${{ matrix.tag }})
        else
          rune_test=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v /dev/sgx_enclave:/dev/sgx/enclave -v /dev/sgx_provision:/dev/sgx/provision -v $GITHUB_WORKSPACE:/root/inclavare-containers rune-test:${{ matrix.tag }})
        fi;
        echo "rune_test=$rune_test" >> $GITHUB_ENV

    - name: Build and install packages
      run: docker exec $rune_test bash -c "cp -r /root/inclavare-containers /root/inclavare-containers-test; 
        cd /root/inclavare-containers-test/rune;
        find ../ -name *.pb.go | xargs -I files touch files;
        make -j${CPU_NUM} && make install -j${CPU_NUM}"

    - uses: ./.github/actions/start-docker-daemon
      with:
        container-id: $rune_test
      timeout-minutes: 2

    - name: Build Occlum docker image
      run: docker exec $rune_test bash -c "cd /root; occlum-gcc -o hello_world hello_world.c;
        occlum new occlum_instance && cd occlum_instance;
        cp ../hello_world image/bin/ && occlum build;
        occlum package occlum_instance.tar.gz;
        docker build . -t occlum-app -f /root/Dockerfile-occlum"

    - name: Run Occlum image
      if: ${{ !(contains(matrix.tag, 'alinux') && contains(matrix.sgx, 'SGX1')) }}
      run: docker exec $rune_test bash -c "docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/opt/occlum/build/lib/libocclum-pal.so -e ENCLAVE_RUNTIME_ARGS=occlum_instance -e ENCLAVE_RUNTIME_LOGLEVEL="info" occlum-app"

    - name: Run Occlum bundle
      if: ${{ !(contains(matrix.tag, 'alinux') && contains(matrix.sgx, 'SGX1')) }}
      run: |
        docker exec $rune_test bash -c "mkdir rootfs;
        docker create --name occlum-app occlum-app;
        docker export occlum-app | tar -C rootfs -xvf -;
        rune spec;
        sed -i '4 c \"terminal\": false,' config.json;
        sed -i '16 c \"cwd\": \"\/\",' config.json;
        sed -i 's#\"sh\"#\"/bin/hello_world\"#g' config.json;
        sed -i 's#\"debug\"#\"occlum_instance\"#g' config.json;
        sed -i 's#/var/run/rune/liberpal-skeleton-v2.so#/opt/occlum/build/lib/libocclum-pal.so#g' config.json;
        rune --debug run occlum-app && rm -rf rootfs config.json"

    - name: Kill the container
      run: docker stop $rune_test
