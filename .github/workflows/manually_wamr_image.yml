name: Wamr image build, run and push

# This is a manual trigger.
on: [workflow_dispatch]

jobs:
  wamr_build:
    runs-on: [self-hosted, SGX1, commit]
    steps:
    - uses: actions/checkout@v1

    - name: Get version
      run: echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV;
        echo "RUNE_VERSION=$(grep 'Version:' rune/dist/rpm/rune.spec | awk '{print $2}')" >> $GITHUB_ENV;

    - name: Create ubuntu container
      run: docker rm -f wamr || true;
        docker pull inclavarecontainers/dev:${{ env.RUNE_VERSION }}-ubuntu18.04;
        docker tag inclavarecontainers/dev:${{ env.RUNE_VERSION }}-ubuntu18.04 inclavare-dev:ubuntu18.04;
        docker run -itd --privileged --rm --name=wamr --net host --device /dev/isgx -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v $GITHUB_WORKSPACE:/root/inclavare-containers -v /var/run/aesmd:/var/run/aesmd inclavare-dev:ubuntu18.04

    - name: Config git proxy
      run: |
        docker exec wamr bash -c "git config --global http.proxy socks5://localhost:5432"
        docker exec wamr bash -c "git config --global https.proxy socks5://localhost:5432"

    - uses: ./.github/actions/start-docker-daemon
      with:
        container-id: wamr
      timeout-minutes: 2

    - name: Build and install rune on ubuntu
      run: docker exec wamr bash -c "source /etc/profile;
         cd /root/inclavare-containers/rune && make -j${CPU_NUM} && make install -j${CPU_NUM}"

    - name: Build wamr application image
      run: |
        docker exec wamr bash -c "git clone https://github.com/bytecodealliance/wasm-micro-runtime;
        cd wasm-micro-runtime/product-mini/platforms/linux-sgx/;
        mkdir build && cd build && cmake .. && make;
        cd ../enclave-sample && make SGX_MODE=HW SGX_DEBUG=1;
        g++ -shared -fPIC -o libwamr-pal.so App/*.o libvmlib_untrusted.a -L/opt/intel/sgxsdk/lib64 -lsgx_urts -lpthread -lssl -lcrypto;
        cp ./libwamr-pal.so /usr/lib/libwamr-pal.so;
        cd /root/wasm-micro-runtime/wamr-compiler;
        ./build_llvm.sh;
        mkdir build && cd build;
        cmake .. && make -j${CPU_NUM};
        cp wamrc /usr/bin/wamrc"

        docker exec wamr bash -c "cat <<- EOF >/root/wasm-micro-runtime/product-mini/platforms/linux-sgx/enclave-sample/test.c
        "#include\<stdio.h\>"
        int main (void)
        {
            printf(\"Hello world!\n\");
            return 0;
        }
        EOF"

        docker exec wamr bash -c "wget -t 5 https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk-12.0-linux.tar.gz;
        tar zxf wasi-sdk-12.0-linux.tar.gz -C /opt;
        mv /opt/wasi-sdk-12.0 /opt/wasi-sdk;
        cd /root/wasm-micro-runtime/product-mini/platforms/linux-sgx/enclave-sample;
        /opt/wasi-sdk/bin/clang -O3 -o test.wasm test.c;
        wamrc -sgx -o test.aot test.wasm"

        docker exec wamr bash -c "cat <<- EOF >/root/wasm-micro-runtime/product-mini/platforms/linux-sgx/enclave-sample/Dockerfile
        FROM centos:8.2.2004
        RUN mkdir -p /run/rune
        WORKDIR /run/rune
        COPY enclave.signed.so .
        COPY test.aot app
        ENTRYPOINT [\"/run/rune/app\"]
        EOF"

        docker exec wamr bash -c "cd /root/wasm-micro-runtime/product-mini/platforms/linux-sgx/enclave-sample;
        docker build . -t inclavarecontainers/enclave-wamr:latest"

    - name: Run wamr image on ubuntu
      run: docker exec wamr bash -c "docker run -i --rm --runtime=rune  -e ENCLAVE_TYPE=intelSgx  -e ENCLAVE_RUNTIME_PATH=/usr/lib/libwamr-pal.so -e ENCLAVE_RUNTIME_ARGS=debug inclavarecontainers/enclave-wamr:latest"

    - name: Push wamr image to Dockerhub
      run: docker exec wamr bash -c "docker login -p ${{ secrets.DOCKER_PASSWORD }} -u ${{ secrets.DOCKER_USERNAME }};
        docker push inclavarecontainers/enclave-wamr:latest"

    - name: Kill the container
      run: docker stop wamr
