name: Basic Compilation Check

on: pull_request

jobs:
  basic_complication_check:
    # Run all steps in the compilation testing containers
    strategy:
      matrix:
        tag: [ubuntu18.04, alinux2]

    container: runetest/compilation-testing:${{ matrix.tag }}

    # Use GitHub-hosted runner Ubuntu 18.04
    runs-on: ubuntu-18.04

    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Preparations
        # Touch all .pb.go to prevent from calling protobuf compiler
        run:
          echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV;
          find ./ -name *.pb.go -exec touch {} \;;

      - name: Compile "enclave-tls"
        run:
          cd enclave-tls;
          source /root/.bashrc && make && make install && make clean &&
            make SGX=1 && make clean && make OCCLUM=1

      - name: Compile "verdictd"
        run:  
          cd verdictd;
          source /root/.bashrc && make && make install && make clean
        env:
          HOME: /root
          GOPROXY: "https://goproxy.cn,direct"

      - name: Compile "rune shim-rune sgx-tools epm pal"
        run:
          source /root/.bashrc && make -j${CPU_NUM} && make install -j${CPU_NUM};
          cd rune/libenclave/internal/runtime/pal/skeleton &&
            make -j${CPU_NUM} && ls liberpal-skeleton-v*.so;
          cd ../nitro_enclaves && make -j${CPU_NUM} && ls libpal_ne.so;
          which rune epm containerd-shim-rune-v2 sgx-tools
        env:
          HOME: /root

      - name: Compile "rats-tls"
        if: ${{ !contains(matrix.tag, 'alinux2') }}
        run:
          cd rats-tls;
          source /root/.bashrc && cmake -DBUILD_SAMPLES=on -H. -Bbuild && make -C build install && make -C build clean && rm -rf build &&
          cmake -DRATS_TLS_BUILD_MODE="occlum" -DBUILD_SAMPLES=on -H. -Bbuild && make -C build install && make -C build clean && rm -rf build &&
          cmake -DRATS_TLS_BUILD_MODE="sgx" -DBUILD_SAMPLES=on -H. -Bbuild && make -C build clean && rm -rf build
