name: Run verdictd

# Controls when the action will run. Triggers the workflow on pull request labeled testing-before-checkin.
on:
  pull_request_target:
    types: labeled

env:
  VERDICTD_BINDIR: /usr/local/bin/verdictd
  VERDICT_BINDIR: /usr/local/bin/verdict
  OPA_LIBDIR: /usr/local/lib/libopa.so
  RATS_TLS_ROOTDIR: /usr/local/lib/rats-tls
  UUID: 84688df7-2c0c-40fa-956b-29d8e74d16c1
  ENCRYPTED_IMAGE: alpine-encrypted-cicd

jobs:
  verdictd:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'testing-before-checkin') }}
    runs-on: ${{ matrix.sgx }}
    strategy:
      matrix:
        sgx: [[self-hosted, SGX2, commit]]
        tag: [ubuntu18.04]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: refs/pull/${{ github.event.pull_request.number }}/merge

    - name: Prepare work
      run: echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV;
        echo "RUNE_VERSION=$(cat VERSION)" >> $GITHUB_ENV;

    - name: Create inclavare development container
      run: |
        docker pull inclavarecontainers/dev:${{ env.RUNE_VERSION }}-${{ matrix.tag }};
        docker tag inclavarecontainers/dev:${{ env.RUNE_VERSION }}-${{ matrix.tag }} inclavare-dev:${{ matrix.tag }};
        inclavare_dev=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v $GITHUB_WORKSPACE:/root/inclavare-containers inclavare-dev:${{ matrix.tag }});
        echo "inclavare_dev=$inclavare_dev" >> $GITHUB_ENV

    - name: Config proxy
      run: |
        docker exec $inclavare_dev bash -c 'git config --global http.proxy socks5://localhost:5432'
        docker exec $inclavare_dev bash -c 'git config --global https.proxy socks5://localhost:5432'
        docker exec $inclavare_dev bash -c 'export GOPROXY=https://goproxy.io,direct'
        docker exec $inclavare_dev bash -c "cat <<- EOF >/root/.cargo/config
        [source.crates-io]
        registry = \"https://github.com/rust-lang/crates.io-index\"
        replace-with = 'tuna'
        
        [source.tuna]
        registry = \"https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git\"
        EOF"
        
    - uses: ./.github/actions/make-packages
      with:
        container-id: ${{ env.inclavare_dev }}
        os: ${{ matrix.tag }}
        version: ${{ env.RUNE_VERSION }}
        cpu_num: ${{ env.CPU_NUM }}

    - name: Kill the dev container
      run: docker stop $inclavare_dev
      
    - name: Create runtime testing container
      run: |
        inclavare_test=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v /dev/sgx_enclave:/dev/sgx/enclave -v /dev/sgx_provision:/dev/sgx/provision -v $GITHUB_WORKSPACE:/root/inclavare-containers -v /var/run/aesmd:/var/run/aesmd inclavarecontainers/dev:${{ env.RUNE_VERSION }}-${{ matrix.tag }});
        echo "inclavare_test=$inclavare_test" >> $GITHUB_ENV

    - name: Install runtime packages
      if: always()
      run : |
        if [ '${{ matrix.tag }}' = 'ubuntu18.04' ]; then
          docker exec $inclavare_test bash -c 'cd /root/inclavare-containers/${{ matrix.tag }};
            dpkg -i rats*.deb verdictd*.deb'
        else
          docker exec $inclavare_test bash -c 'cd /root/inclavare-containers/${{ matrix.tag }};
            rpm -ivh rats*.rpm verdictd*.rpm'
        fi
 
    - id: random-port-generator2
      uses: ./.github/actions/generate-random-port

    - id: random-port-generator3
      uses: ./.github/actions/generate-random-port      

    - name: install sample image
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 120
        max_attempts: 500
        command: docker exec $inclavare_test bash -c 'mkdir /root/images && cd /root/images;
          skopeo --insecure-policy copy docker://docker.io/library/alpine:latest oci:alpine'
        on_retry_command: echo '******************[RETRY]******************'

    - name: install configuration files
      run: |
        docker exec $inclavare_test bash -c 'mkdir /opt/verdictd/ && mkdir /opt/verdictd/keys/'
        docker exec $inclavare_test bash -c "cat <<- EOF >/opt/verdictd/keys/${{ env.UUID }}
        1111111111111111111111111111111
        EOF"
        
        docker exec $inclavare_test bash -c "cat <<- EOF >/root/images/pod.yaml
        metadata:
          attempt: 1
          name: my-podsandbox
          namespace: default
          uid: hdishd83djaidwnduwk28bcsb
        log_directory: /tmp/eaa_test
        linux:
          namespaces:
            options: {}
        EOF"
        
        docker exec $inclavare_test bash -c "cat <<- EOF >/root/images/container.yaml
        metadata:
          name: alpine.enc
        image:
          image: ${{ secrets.TEST_DOCKER_USERNAME }}/${{ env.ENCRYPTED_IMAGE }}-${{ matrix.tag }}:latest
        command:
        - top
        log_path: busybox.0.log
        EOF"
        
        docker exec $inclavare_test bash -c 'rm -fr /etc/containerd/ocicrypt/ocicrypt_keyprovider.conf'
        docker exec $inclavare_test bash -c "cat <<- EOF >/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf
        {
            \"key-providers\": {
                \"attestation-agent\": {
                    \"grpc\": \"127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }}\"
                }
            }
        }
        EOF"
        
        docker exec $inclavare_test bash -c "cat <<- EOF >/root/gpg_public_key
        -----BEGIN PGP PUBLIC KEY BLOCK-----
        
        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
        3Rpbshl5e57vTBRxbqg+4ag=
        =WUm6
        -----END PGP PUBLIC KEY BLOCK-----
        EOF"

    - name: Launch all Services
      run: |
        docker exec $inclavare_test bash -c 'verdictd --listen 127.0.0.1:${{ steps.random-port-generator2.outputs.random-port }} --client-api 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }}' &
        docker exec $inclavare_test bash -c 'containerd' &

    - name: Test generate encrypted container image
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 120
        max_attempts: 500
        command: docker exec $inclavare_test bash -c 'cd /root/images/ && OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf skopeo copy --insecure-policy --encryption-key provider:attestation-agent:${{ env.UUID }} oci:alpine oci:${{ env.ENCRYPTED_IMAGE }}-${{ matrix.tag }}'
        on_retry_command: echo '******************[RETRY]******************'

    - name: generate OPA files
      run: |
        docker exec $inclavare_test bash -c "cat <<- EOF >./sgxData_local
        {
            \"mrEnclave\" : [],
            \"mrSigner\" : [],
            \"productId\" : 2,
            \"svn\" : 1
        }
        EOF"
        docker exec $inclavare_test bash -c "cat <<- EOF >./input
        {
            \"mrEnclave\" : "1234",
            \"mrSigner\" : "1234",
            \"productId\" : 5,
            \"svn\" : 5
        }
        EOF"

    - name: Test Verdict
      run: |
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --export-opa-policy sgxPolicy.rego'
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --set-opa-reference sgxData ./sgxData_local'
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --export-opa-reference sgxData'
        docker exec $inclavare_test bash -c 'cmp -s ./sgxData_local ./sgxData || exit -1'
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --test-opa-remote sgxPolicy.rego sgxData ./input'
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --test-opa-local ./sgxPolicy.rego ./sgxData ./input'
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --test-opa-local-policy ./sgxPolicy.rego sgxData ./input'
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --test-opa-local-reference sgxPolicy.rego ./sgxData ./input'
        
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --import-gpg-key /root/gpg_public_key'
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --list-gpg-keys'
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --delete-gpg-key cicd121@126.com'
        
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --export-image-sigstore'
        docker exec $inclavare_test bash -c 'verdict -c 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }} --export-image-policy'

    - name: Clean up the github workspace
      if: ${{ always() }}
      run:
        docker restart $inclavare_test;
        docker exec $inclavare_test bash -c 'rm -rf /root/inclavare-containers/${{ matrix.tag }}'

    - name: Kill the test container
      run: docker stop $inclavare_test
