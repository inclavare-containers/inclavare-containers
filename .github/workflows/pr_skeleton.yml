name: Run rune with skeleton

# Controls when the action will run. Triggers the workflow on pull request labeled testing-before-checkin.
on:
  pull_request_target:
    types: labeled

env:
  ALINUX2_PROTOBUF_VERSION: 2.5.0
  ALINUX2_PROTOBUF_C_VERSION: 1.0.2

jobs:
  rune_skeleton:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'testing-before-checkin') }}
    runs-on: ${{ matrix.sgx }}
    strategy:
      matrix:
        sgx: [[self-hosted, SGX1, commit], [self-hosted, SGX2, commit]]
        tag: [ubuntu18.04, centos8.2, alinux2]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: refs/pull/${{ github.event.pull_request.number }}/merge

    - name: Prepare work
      run: echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV;
        echo "RUNE_VERSION=$(cat VERSION)" >> $GITHUB_ENV;

    - name: Create inclavare development container
      run: |
        docker pull inclavarecontainers/dev:${{ env.RUNE_VERSION }}-${{ matrix.tag }};
        docker tag inclavarecontainers/dev:${{ env.RUNE_VERSION }}-${{ matrix.tag }} inclavare-dev:${{ matrix.tag }};
        inclavare_dev=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v $GITHUB_WORKSPACE:/root/inclavare-containers inclavare-dev:${{ matrix.tag }});
        echo "inclavare_dev=$inclavare_dev" >> $GITHUB_ENV

    - uses: ./.github/actions/make-packages
      with:
        container-id: ${{ env.inclavare_dev }}
        os: ${{ matrix.tag }}
        version: ${{ env.RUNE_VERSION }}
        cpu_num: ${{ env.CPU_NUM }}

    - uses: ./.github/actions/start-docker-daemon
      with:
        container-id: $inclavare_dev
      timeout-minutes: 2

    - name: Build skeleton docker image
      run: |
        docker exec $inclavare_dev bash -c "cd /root/inclavare-containers-${{ env.RUNE_VERSION }}/rune/libenclave/internal/runtime/pal/skeleton;
        make -j${CPU_NUM} && cp liberpal-skeleton-v*.so /root/inclavare-containers/${{ matrix.tag }}"
        
        docker exec $inclavare_dev bash -c "cat >Dockerfile <<-EOF
        FROM scratch
        
        COPY encl.bin /
        COPY encl.ss /
        
        ENTRYPOINT [\"dummy\"]
        EOF"
       
        docker exec $inclavare_dev bash -c "cd /root/inclavare-containers-${{ env.RUNE_VERSION }}/rune/libenclave/internal/runtime/pal/skeleton;
        docker build . -t skeleton-enclave -f /root/Dockerfile;
        cd /root/inclavare-containers/${{ matrix.tag }};
        docker save -o skeleton-enclave.tar skeleton-enclave"
    
    - name: Kill the dev container
      run: docker stop $inclavare_dev

    - name: Create runtime testing container
      run: |
        docker pull runetest/skeleton-runtime-testing:${{ env.RUNE_VERSION }}-${{ matrix.tag }};
        docker tag runetest/skeleton-runtime-testing:${{ env.RUNE_VERSION }}-${{ matrix.tag }} inclavare-test:${{ matrix.tag }};
        if [ '${{ matrix.sgx }}' = '[self-hosted, SGX1]' ]; then
            inclavare_test=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v /dev/sgx_enclave:/dev/sgx/enclave -v /dev/sgx_provision:/dev/sgx/provision -v $GITHUB_WORKSPACE:/root/inclavare-containers -v /var/run/aesmd:/var/run/aesmd inclavare-test:${{ matrix.tag }});
        else
            inclavare_test=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 --device /dev/isgx -v $GITHUB_WORKSPACE:/root/inclavare-containers -v /var/run/aesmd:/var/run/aesmd inclavare-test:${{ matrix.tag }});
        fi;
        echo "inclavare_test=$inclavare_test" >> $GITHUB_ENV

    - name: Install runtime packages
      if: always()
      run : |
        if [ '${{ matrix.tag }}' = 'ubuntu18.04' ]; then
          docker exec $inclavare_test bash -c 'cd /root/inclavare-containers/${{ matrix.tag }};
            dpkg -i rune*.deb shim-rune*deb sgx-tools*.deb;
            mv liberpal-skeleton-v*.so /usr/lib'
        else
          docker exec $inclavare_test bash -c 'cd /root/inclavare-containers/${{ matrix.tag }};
            rpm -ivh rune*.rpm shim-rune*rpm sgx-tools*.rpm;
            mv liberpal-skeleton-v*.so /usr/lib'
        fi

    - uses: ./.github/actions/start-docker-daemon
      with:
        container-id: $inclavare_test
      timeout-minutes: 2

    - name: Load docker image
      run: |
        docker exec $inclavare_test bash -c "cd /root/inclavare-containers/${{ matrix.tag }};
        docker load -i skeleton-enclave.tar;
        rm -f skeleton-enclave.tar"

    - name: Run skeleton v1
      if: always()
      run: docker exec $inclavare_test bash -c 'docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v1.so -e ENCLAVE_RUNTIME_ARGS=debug -e ENCLAVE_RUNTIME_LOGLEVEL="info" skeleton-enclave'

    - name: Run skeleton v2
      if: always()
      run: docker exec $inclavare_test bash -c "docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v2.so -e ENCLAVE_RUNTIME_ARGS=debug -e ENCLAVE_RUNTIME_LOGLEVEL="info" skeleton-enclave"

    - name: Run skeleton v3
      if: always()
      run: docker exec $inclavare_test bash -c "docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v3.so -e ENCLAVE_RUNTIME_ARGS=debug -e ENCLAVE_RUNTIME_LOGLEVEL="info" skeleton-enclave"

    - name: Run skeleton v2 bundle
      if: always()
      run: |
        docker exec $inclavare_test bash -c "mkdir rootfs;
        docker create --name skeleton-enclave skeleton-enclave;
        docker export skeleton-enclave | tar -C rootfs -xvf -;
        cp -f /etc/resolv.conf rootfs/etc/resolv.conf;
        mkdir -p /var/run/rune;
        cp -f /usr/lib/liberpal-skeleton-v2.so /var/run/rune/liberpal-skeleton-v2.so;
        rune spec;
        sed -i '4 c \"terminal\": false,' config.json;
        sed -i '16 c \"cwd\": \"\/\",' config.json;
        rune --debug run ra"

    - name: Generate skeleton ra config.json
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: |
        docker exec $inclavare_test bash -c "sed -i '161,163d' config.json;
        sed -i 's/\/var\/run\/rune\/liberpal-skeleton-v2.so/\/usr\/lib\/liberpal-skeleton-v3.so/g' config.json;
        sed -i '10 c  \"sh\",\"wait_timeout\",\"6000\"' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_is_linkable\": \"false\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_subscription_key\": \"${{ secrets.SUB_KEY }}\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_spid\": \"${{ secrets.SPID }}\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_type\":\"EPID\",' config.json"

    - name: Run skeleton v3 bundle
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $inclavare_test bash -c "rune --debug run skeleton-enclave-container" &

    - name: Wait RA containers Running with rune list command
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      timeout-minutes: 2
      run: |
        docker exec $inclavare_test bash -c "while true; do
        status=\$(rune list 2>/dev/null | grep skeleton-enclave-container | awk '{print \$3}')
        echo Current status: \$status
        if [[ \$status = 'running' ]]; then
          break
        fi
        sleep 5
        done"

    - name: Get local report with rune attest command
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $inclavare_test bash -c "rune --debug attest --reportFile=/report.bin --quote-type=epidUnlinkable skeleton-enclave-container"

    - name: Get remote report with rune attest command
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $inclavare_test bash -c "rune --debug attest --isRA --quote-type=epidUnlinkable --spid=${{ secrets.SPID }} --subscription-key=${{ secrets.SUB_KEY }} skeleton-enclave-container"

    - uses: ./.github/actions/rune-kill
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      timeout-minutes: 3
      with:
        container-id: ${{ env.inclavare_test }}
        container-name: skeleton-enclave-container

    - name: Get target info with sgx-tools
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $inclavare_test bash -c "cd rootfs;
        sgx-tools -verbose gen-qe-target-info --quote-type=epidUnlinkable"

    - name: Get quote with sgx-tools
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $inclavare_test bash -c "cd rootfs;
        sgx-tools -verbose gen-quote --report report.bin --spid=${{ secrets.SPID }} --quote-type=epidUnlinkable"

    - name: Verify quote with sgx-tools
      if: ${{ contains(matrix.sgx, 'SGX1') }}
      run: docker exec $inclavare_test bash -c "cd rootfs;
        sgx-tools -verbose verify-quote --quote-type=epidUnlinkable --quote quote.bin --spid=${{ secrets.SPID }} --subscription-key=${{ secrets.SUB_KEY }}"

    - name: Clean up the github workspace
      run:
          docker exec $inclavare_test bash -c "rm -rf /root/inclavare-containers/${{ matrix.tag }}"

    - name: Kill the test container
      run: docker stop $inclavare_test
