name: Nightly Ubuntu SGX1

# This is a manual trigger and schedule to run everyday at 2AM CST.
on:
  workflow_dispatch:
  schedule:
    # Schedule to run everyday at 2AM CST
    - cron:  '0 18 * * *'

env:
  WORK_DIR: /root/pkgs
  HOME: /root
  OCCLUM_VERSION: 0.21.0
  SGX_DRIVER_VERSION: 2.11.0_2d2b795
  SGX_SDK_VERSION: 2.14.100.2
  DCAP_VERSION: 1.11.100.2
  kubernetes_version: 1.18.8
  nap_time: 60

jobs:
  k8s_ubuntu:
    runs-on: [self-hosted, SGX1, nightly, ubuntu]
    steps:
      - name: Prepare the execution enviorment
        run: |
          rm -f /etc/apt/sources.list.d/kubernetes.list
          rm -f /etc/apt/sources.list.d/occlum.list
          rm -fr $WORK_DIR
          mkdir -p $WORK_DIR
          pushd $WORK_DIR
          sudo apt-get install software-properties-common
          sudo add-apt-repository ppa:git-core/ppa -y
          sudo apt-get update
          sudo apt-get install -y git
          git config --global http.proxy socks5://localhost:5432
          git config --global https.proxy socks5://localhost:5432
          wget -q https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz
          tar -zxvf go1.14.2.linux-amd64.tar.gz -C /usr/lib
          echo "export GOROOT=/usr/lib/go" > /tmp/.bashrc
          echo "export GOPATH=/root/gopath" >> /tmp/.bashrc
          echo "export PATH=$PATH:\$GOROOT/bin:\$GOPATH/bin" >> /tmp/.bashrc
          echo "export GOPROXY=\"https://mirrors.aliyun.com/goproxy,direct\"" >>/tmp/.bashrc
          echo "export GO111MODULE=on" >>/tmp/.bashrc
          source /tmp/.bashrc
          popd

      - uses: actions/checkout@v1

      - uses: ./.github/actions/clean-nightly-env/ubuntu
        with:
          work-dir: ${WORK_DIR}

      # We usually update rune.spec to the latest version before release. Therefore we get the latest version according to rune.spec.
      - name: Get version
        run: echo "RUNE_VERSION=$(grep 'Version:' rune/dist/rpm/rune.spec | awk '{print $2}')" >> $GITHUB_ENV;
          echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV

      - name: Install Intel SGX stack
        run: |
          sudo apt-get install -y libssl-dev libcurl4-openssl-dev libprotobuf-dev
          sudo apt-get install -y build-essential python
          pushd ${WORK_DIR}
          wget https://download.01.org/intel-sgx/sgx-linux/2.14/distro/ubuntu18.04-server/sgx_linux_x64_driver_${SGX_DRIVER_VERSION}.bin -O sgx_linux_x64_driver_${SGX_DRIVER_VERSION}.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.14/distro/ubuntu18.04-server/sgx_linux_x64_sdk_${SGX_SDK_VERSION}.bin -O sgx_linux_x64_sdk_${SGX_SDK_VERSION}.bin
          echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main' | sudo tee /etc/apt/sources.list.d/intel-sgx.list
          wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y libsgx-launch=${{ env.SGX_SDK_VERSION }}-bionic1 libsgx-urts=${{ env.SGX_SDK_VERSION }}-bionic1
          sudo apt-get install -y libsgx-epid=${{ env.SGX_SDK_VERSION }}-bionic1 libsgx-urts=${{ env.SGX_SDK_VERSION }}-bionic1
          sudo apt-get install -y libsgx-quote-ex=${{ env.SGX_SDK_VERSION }}-bionic1 libsgx-urts=${{ env.SGX_SDK_VERSION }}-bionic1
          sudo apt-get install -y libsgx-ae-qve=${{ env.DCAP_VERSION }}-bionic1 libsgx-dcap-ql=${{ env.DCAP_VERSION }}-bionic1 libsgx-dcap-quote-verify=${{ env.DCAP_VERSION }}-bionic1\
            libsgx-dcap-quote-verify-dev=${{ env.DCAP_VERSION }}-bionic1
          sudo /bin/bash /opt/intel/sgx-aesm-service/cleanup.sh
          sudo /bin/bash /opt/intel/sgx-aesm-service/startup.sh
          chmod +x sgx_linux_x64_driver_${SGX_DRIVER_VERSION}.bin sgx_linux_x64_sdk_${SGX_SDK_VERSION}.bin
          ./sgx_linux_x64_driver_${SGX_DRIVER_VERSION}.bin
          echo -e "no\n/opt/intel\n" |  ./sgx_linux_x64_sdk_${SGX_SDK_VERSION}.bin
          popd

      - name: Install Occlum stack
        run: |
          sudo apt-get install -y unzip
          pushd ${WORK_DIR}
          if [ ! $(lsmod | grep enable_rdfsbase) ]; then
            wget https://github.com/occlum/enable_rdfsbase/archive/master.zip -O enable_rdfsbase.zip && unzip enable_rdfsbase.zip
            pushd enable_rdfsbase-master
            make && make install
            popd
          fi
          sudo apt-get install -y libsgx-uae-service
          popd

          echo 'deb [arch=amd64] http://occlum.io/occlum-package-repos/debian bionic main' | tee /etc/apt/sources.list.d/occlum.list;
          wget -qO - http://occlum.io/occlum-package-repos/debian/public.key | apt-key add -
          sudo apt-get update
          sudo apt-get install -y occlum-pal=${{ env.OCCLUM_VERSION }}-1
          # sudo apt-get install -y occlum-runtime=${{ env.OCCLUM_VERSION }}-1
          # sudo apt-get install -y occlum-sgx-tools=${{ env.OCCLUM_VERSION }}-1
          # sudo apt-get install -y occlum-toolchains-gcc
          # sudo apt-get install -y occlum=${{ env.OCCLUM_VERSION }}-1

      - name: Install rune shim and epm
        run: |
          sudo apt-get install -y libseccomp-dev pkg-config
          sudo apt update
          pushd $WORK_DIR
          cp -r $GITHUB_WORKSPACE inclavare-containers-$RUNE_VERSION
          tar zcf v$RUNE_VERSION.tar.gz inclavare-containers-$RUNE_VERSION
          cd inclavare-containers-$RUNE_VERSION
          echo "$RUNE_VERSION" > VERSION
          find ./ -path "*deb/build.sh" | xargs -I files sed -i '17 d' files;
          find ./ -path "*deb/build.sh" | xargs -I files sed -i "17icp $WORK_DIR/v*.tar.gz \$DEBBUILD_DIR" files;
          sed -i 's/shelter//g' Makefile
          sed -i 's/inclavared//g' Makefile
          sed -i 's/enclave-tls//g' Makefile
          make package -j${CPU_NUM};
          dpkg -i rune_$RUNE_VERSION-1_amd64.deb;
          dpkg -i shim-rune_$RUNE_VERSION-1_amd64.deb
          dpkg -i epm_$RUNE_VERSION-1_amd64.deb
          cd shim
          openssl genrsa -out private_key.pem -3 3072
          openssl rsa -in private_key.pem -pubout -out public_key.pem
          go build -mod=vendor -o signatureserver cmd/signature-server/main.go || exit 1
          chmod +x signatureserver
          nohup ./signatureserver --public-key public_key.pem --private-key private_key.pem &
          netstat -natp | grep 9080 || exit 1
          echo -e "[signature]\n    server_address = \"http://127.0.0.1:9080\"" >> /etc/inclavare-containers/config.toml
          popd

      - name: Configure containerd
        run: |
          pushd ${WORK_DIR}
          proxychains4 curl -LO https://github.com/containerd/containerd/releases/download/v1.4.11/containerd-1.4.11-linux-amd64.tar.gz
          tar -xvf containerd-1.4.11-linux-amd64.tar.gz
          /bin/cp -f bin/* /usr/local/bin
          cat <<- EOF >/etc/systemd/system/containerd.service
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target

          [Service]
          ExecStartPre=/sbin/modprobe overlay
          ExecStart=/usr/local/bin/containerd
          Restart=always
          RestartSec=5
          Delegate=yes
          KillMode=process
          OOMScoreAdjust=-999
          LimitNOFILE=1048576
          LimitNPROC=infinity
          LimitCORE=infinity

          [Install]
          WantedBy=multi-user.target
          EOF

          mkdir -p /etc/containerd
          cat <<- EOF >/etc/containerd/config.toml
          [plugins]
            [plugins.cri]
              sandbox_image = "registry.cn-hangzhou.aliyuncs.com/acs/pause-amd64:3.1"
              [plugins.cri.containerd]
                default_runtime_name = "rune"
                snapshotter = "overlayfs"
                [plugins.cri.containerd.runtimes.rune]
                  runtime_type = "io.containerd.rune.v2"
          EOF
          popd
          sudo systemctl enable containerd.service
          sudo systemctl restart containerd.service

      - name: Install kubernetes
        run: |
          sudo modprobe br_netfilter
          cat <<- EOF | tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          EOF

          sudo sysctl --system
          sudo apt update && sudo apt install -y apt-transport-https curl
          curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main" >>/etc/apt/sources.list.d/kubernetes.list

          sudo apt update && apt install -y kubelet=${kubernetes_version}-00 kubeadm=${kubernetes_version}-00 kubectl=${kubernetes_version}-00
          cat << EOF >/etc/resolv.conf.kubernetes
          nameserver 8.8.8.8
          options timeout:2 attempts:3 rotate single-request-reopen
          EOF

          cat << EOF >/etc/systemd/system/kubelet.service.d/10-kubeadm.conf
          # Note: This dropin only works with kubeadm and kubelet v1.11+
          [Service]
          Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
          Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
          Environment="KUBELET_SYSTEM_PODS_ARGS=--max-pods 64 --pod-manifest-path=/etc/kubernetes/manifests"
          Environment="KUBELET_NETWORK_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin"
          Environment="KUBELET_DNS_ARGS=--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/acs/pause-amd64:3.0 --cluster-domain=cluster.local --cloud-provider=external --resolv-conf=/etc/resolv.conf.kubernetes"
          Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=/run/containerd/containerd.sock"
          ExecStart=
          ExecStart=/usr/bin/kubelet \$KUBELET_KUBECONFIG_ARGS \$KUBELET_CONFIG_ARGS \$KUBELET_SYSTEM_PODS_ARGS \$KUBELET_NETWORK_ARGS \$KUBELET_DNS_ARGS \$KUBELET_EXTRA_ARGS
          EOF

          sudo systemctl enable kubelet.service

          if [ -f /etc/kubernetes/admin.conf ]; then
            kubeadm reset -f
          fi
          sudo systemctl enable kubelet.service
          kubeadm init --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --kubernetes-version=v${kubernetes_version} \
            --pod-network-cidr="172.21.0.0/20" --service-cidr="172.20.0.0/20"  --cri-socket=/run/containerd/containerd.sock

          mkdir -p $HOME/.kube
          sudo /bin/cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config
          kubectl taint nodes $(hostname | tr 'A-Z' 'a-z') node.cloudprovider.kubernetes.io/uninitialized-
          kubectl taint nodes $(hostname | tr 'A-Z' 'a-z') node-role.kubernetes.io/master-
          if [ ! -f /tmp/kube-flannel.yml ]; then
            wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 --tries=0\
                $WORK_DIR https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml\
                -O /tmp/kube-flannel.yml
          fi
          kubectl apply -f /tmp/kube-flannel.yml

      - name: Install runtimeclass
        run: |
          cat <<- EOF >$WORK_DIR/runtime.yaml
          apiVersion: node.k8s.io/v1beta1
          handler: rune
          kind: RuntimeClass
          metadata:
            name: rune
          EOF

          kubectl apply -f $WORK_DIR/runtime.yaml
          kubectl get runtimeclass

      - name: Check k8s
        timeout-minutes: 10
        run: |
          sleep $nap_time
          while true; do
            count=$(kubectl get pod -A | grep -c "1/1")
            if [ $count -eq 8 ]; then
              break
            fi
            sleep 5
          done

      # - name: Run hello-world pod
      #   timeout-minutes: 10
      #   run: |
      #     cat <<- EOF >$WORK_DIR/helloworld.yaml
      #     apiVersion: v1
      #     kind: Pod
      #     metadata:
      #       labels:
      #         run: helloworld
      #       name: helloworld
      #     spec:
      #       runtimeClassName: rune
      #       containers:
      #       - command:
      #         - /bin/hello_world
      #         env:
      #         - name: RUNE_CARRIER
      #           value: occlum
      #         - name: IMAGE_DIGEST
      #           value: "408fbccd943bb"
      #         image: docker.io/inclavarecontainers/occlum-hello-world:scratch
      #         imagePullPolicy: IfNotPresent
      #         name: helloworld
      #         workingDir: /run/rune
      #     EOF

      #     kubectl apply -f $WORK_DIR/helloworld.yaml

      # - name: Run Golang-web pod
      #   run: |
      #     cat <<- EOF >$WORK_DIR/golang-web.yaml
      #     apiVersion: v1
      #     kind: Pod
      #     metadata:
      #       labels:
      #         run: golang-web
      #       name: golang-web
      #       namespace: default
      #     spec:
      #       containers:
      #         - command:
      #             - /bin/web_server
      #           env:
      #             - name: RUNE_CARRIER
      #               value: occlum
      #             - name: OCCLUM_USER_SPACE_SIZE
      #               value: "380MB"
      #             - name: OCCLUM_PROCESS_DEFAULT_MMAP_SIZE
      #               value: "300MB"
      #           image: docker.io/inclavarecontainers/occlum-golang-web:0.16.0-scratch
      #           imagePullPolicy: IfNotPresent
      #           livenessProbe:
      #             httpGet:
      #               path: /ping
      #               port: 8090
      #             initialDelaySeconds: 10
      #             periodSeconds: 10
      #           readinessProbe:
      #             httpGet:
      #               path: /ping
      #               port: 8090
      #             initialDelaySeconds: 10
      #             periodSeconds: 10
      #           name: golang-web
      #           workingDir: /run/rune
      #       dnsPolicy: ClusterFirst
      #       runtimeClassName: rune
      #     EOF

      #     kubectl apply -f $WORK_DIR/golang-web.yaml

      # - name: Run dragonwell-web pod
      #   run: |
      #     cat <<- EOF >$WORK_DIR/dragonwell-web.yaml
      #     apiVersion: v1
      #     kind: Pod
      #     metadata:
      #       labels:
      #         run: dragonwell-web
      #       name: dragonwell-web
      #       namespace: default
      #     spec:
      #       tolerations:
      #         - key: "node.kubernetes.io/disk-pressure"
      #           operator: "Exists"
      #           effect: "NoSchedule"
      #       containers:
      #         - env:
      #             - name: RUNE_CARRIER
      #               value: occlum
      #             - name: OCCLUM_USER_SPACE_SIZE
      #               value: "1400MB"
      #             - name: OCCLUM_MAX_NUM_OF_THREADS
      #               value: "64"
      #             - name: OCCLUM_PROCESS_DEFAULT_MMAP_SIZE
      #               value: "1120MB"
      #             - name: OCCLUM_PROCESS_DEFAULT_HEAP_SIZE
      #               value: "256MB"
      #             - name: OCCLUM_KERNEL_SPACE_HEAP_SIZE
      #               value: "64MB"
      #             - name: OCCLUM_DEFAULT_ENV
      #               value: "LD_LIBRARY_PATH=/usr/lib/jvm/java-11-alibaba-dragonwell/jre/lib/server:/usr/lib/jvm/java-11-alibaba-dragonwell/jre/lib:/usr/lib/jvm/java-11-alibaba-dragonwell/jre/../lib"
      #           image: docker.io/inclavarecontainers/occlum-dragonwell-web:scratch
      #           imagePullPolicy: IfNotPresent
      #           livenessProbe:
      #             httpGet:
      #               path: /
      #               port: 8080
      #             initialDelaySeconds: 60
      #             periodSeconds: 10
      #             failureThreshold: 10
      #           readinessProbe:
      #             httpGet:
      #               path: /
      #               port: 8080
      #             initialDelaySeconds: 60
      #             periodSeconds: 10
      #             failureThreshold: 10
      #           name: dragonwell-web
      #           workingDir: /run/rune
      #       dnsPolicy: ClusterFirst
      #       runtimeClassName: rune
      #     EOF
      #     kubectl apply -f $WORK_DIR/dragonwell-web.yaml

      # - name: Check pod runing
      #   timeout-minutes: 20
      #   run: |
      #     sleep $nap_time
      #     while true; do
      #       count=$(kubectl get pod | grep "Running" | grep -c "1/1")
      #       if [ $count -eq 3 ]; then
      #         break
      #       fi
      #       sleep 5
      #     done

      # - name: Test hello-world pod
      #   run:
      #     timeout 3 kubectl logs -f helloworld  | grep "Hello World" || true

      # - name: Check epm bundle cache
      #   run: |
      #     test -d /var/local/epm/bundle-cache.occlum.cache0/408fbccd943bb/bundle-cache.occlum.cache1/61c26bf4a05f2e7da6ccbdd629acf615/bundle-cache.occlum.cache2 \
      #       || exit 1

      # - name: Rerun hello-world pod
      #   timeout-minutes: 10
      #   run: |
      #     kubectl delete pod helloworld
      #     kubectl apply -f $WORK_DIR/helloworld.yaml
      #     sleep $nap_time
      #     while true; do
      #       count=$(kubectl get pod helloworld | grep "Running" | grep -c "1/1")
      #       if [ $count -eq 1 ]; then
      #         break
      #       fi
      #       sleep 5
      #     done
      #     timeout 3 kubectl logs -f helloworld  | grep "Hello World" || true

      - name: Run off-cloud signed pod
        run: |
          cp /etc/inclavare-containers/config.toml /etc/inclavare-containers/config.toml.bak
          sed -i 's/server/client/g' /etc/inclavare-containers/config.toml
          cat <<- EOF >$WORK_DIR/helloworld_offcloud.yaml
          apiVersion: v1
          kind: Pod
          metadata:
            labels:
              run: helloworld-offcloud
            name: helloworld-offcloud
            namespace: default
          spec:
            restartPolicy: Always
            containers:
              - command:
                - /bin/hello_world
                env:
                  - name: ENCLAVE_TYPE
                    value: intelSgx
                  - name: RUNE_CARRIER
                    value: occlum
                  - name: ENCLAVE_RUNTIME_LOGLEVEL
                    value: info
                  - name: ENCLAVE_RUNTIME_PATH
                    value: /opt/occlum/build/lib/libocclum-pal.so.${OCCLUM_VERSION}
                  - name: ENCLAVE_RUNTIME_ARGS
                    value: /run/rune/occlum_instance
                image: docker.io/inclavarecontainers/occlum-helloworld-client:${OCCLUM_VERSION}
                imagePullPolicy: IfNotPresent
                name: hello-world-client
            dnsPolicy: ClusterFirst
          EOF
          kubectl apply -f $WORK_DIR/helloworld_offcloud.yaml
          sleep $nap_time
          while true; do
            count=$(kubectl get pod helloworld-offcloud | grep "Running" | grep -c "1/1")
            if [ $count -eq 1 ]; then
              break
            fi
            sleep 5
          done
          timeout 3 kubectl logs -f helloworld-offcloud  | grep "Hello World" || true

      - uses: ./.github/actions/clean-nightly-env/ubuntu
        with:
          work-dir: ${WORK_DIR}
