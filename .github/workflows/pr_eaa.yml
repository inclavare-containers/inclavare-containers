name: Run eaa

# Controls when the action will run. Triggers the workflow on pull request labeled testing-before-checkin.
on:
  pull_request_target:
    types: labeled

env:
  VERDICTD_BINDIR: /usr/local/bin/verdictd
  VERDICT_BINDIR: /usr/local/bin/verdict
  OPA_LIBDIR: /usr/local/lib/libopa.so
  RATS_TLS_ROOTDIR: /usr/local/lib/rats-tls
  UUID: 84688df7-2c0c-40fa-956b-29d8e74d16c1
  ENCRYPTED_IMAGE: alpine-encrypted-cicd

jobs:
  eaa:
    # Openssl 1.1 default installation path in alinux2 is different with ubunut and centos and it is nonstandard path, it will cause encalve-tls building error.
    # It is not a general soltuion to adapt openssl 1.1 default installation path in alinux2 to fix building issue.
    # A long term solution for compatible with openssl 1.0 in alinux2, ubunut, centos is under going.
    # Disable cicd test on alinux2 is a short term workaround. Once overall solution for openssl 1.0 is ready, test based on alinux2 will be enabled.
    runs-on: ${{ matrix.sgx }}
    strategy:
      matrix:
        sgx: [[self-hosted, SGX2, commit]]
        tag: [ubuntu18.04]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: refs/pull/${{ github.event.pull_request.number }}/merge

    - name: Prepare work
      run: echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV;
        echo "RUNE_VERSION=$(grep 'Version:' rune/dist/rpm/rune.spec | awk '{print $2}')" >> $GITHUB_ENV;

    - name: Create inclavare development container
      run: |
        docker pull inclavarecontainers/dev:${{ env.RUNE_VERSION }}-${{ matrix.tag }};
        docker tag inclavarecontainers/dev:${{ env.RUNE_VERSION }}-${{ matrix.tag }} inclavare-dev:${{ matrix.tag }};
        inclavare_dev=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v $GITHUB_WORKSPACE:/root/inclavare-containers inclavare-dev:${{ matrix.tag }});
        echo "inclavare_dev=$inclavare_dev" >> $GITHUB_ENV

    - name: Config proxy
      run: |
        docker exec $inclavare_dev bash -c 'git config --global http.proxy socks5://localhost:5432'
        docker exec $inclavare_dev bash -c 'git config --global https.proxy socks5://localhost:5432'
        docker exec $inclavare_dev bash -c 'export GOPROXY=https://goproxy.io,direct'
        docker exec $inclavare_dev bash -c "cat <<- EOF >/root/.cargo/config
        [source.crates-io]
        registry = \"https://github.com/rust-lang/crates.io-index\"
        replace-with = 'tuna'
        
        [source.tuna]
        registry = \"https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git\"
        EOF"

    - name: Build and install eaa
      run: docker exec $inclavare_dev bash -c 'cd /root && source /root/.bashrc;
        cp -r inclavare-containers inclavare-containers-${{ env.RUNE_VERSION }};
        mkdir -p /root/inclavare-containers/${{ matrix.tag }};
        cd inclavare-containers-${{ env.RUNE_VERSION }}/eaa;
        make install;
        cp -rf ${{ env.RATS_TLS_ROOTDIR }} ${{ env.VERDICTD_BINDIR }} ${{ env.OPA_LIBDIR }} /root/inclavare-containers/${{ matrix.tag }}'

    - name: Kill the dev container
      run: docker stop $inclavare_dev
      
    - name: Create runtime testing container
      run: |
        inclavare_test=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v /dev/sgx_enclave:/dev/sgx/enclave -v /dev/sgx_provision:/dev/sgx/provision -v $GITHUB_WORKSPACE:/root/inclavare-containers -v /var/run/aesmd:/var/run/aesmd inclavarecontainers/dev-eaa:0.6.2-ubuntu18.04);
        echo "inclavare_test=$inclavare_test" >> $GITHUB_ENV
        
    - id: random-port-generator1
      uses: ./.github/actions/generate-random-port
 
    - id: random-port-generator2
      uses: ./.github/actions/generate-random-port

    - id: random-port-generator3
      uses: ./.github/actions/generate-random-port      

    - name: install rats-tls & verdictd
      run: docker exec $inclavare_test bash -c 'mv /root/inclavare-containers/${{ matrix.tag }}/rats-tls /usr/local/lib/;
        mv /root/inclavare-containers/${{ matrix.tag }}/libopa.so /usr/local/lib/;
        mv /root/inclavare-containers/${{ matrix.tag }}/verdictd /usr/local/bin/'

    - name: install sample image
      run: docker exec $inclavare_test bash -c 'mkdir /root/images && cd /root/images;
        skopeo --insecure-policy copy docker://docker.io/library/alpine:latest oci:alpine'

    - name: install configuration files
      run: |
        docker exec $inclavare_test bash -c 'mkdir /opt/verdictd/ && mkdir /opt/verdictd/keys/'
        docker exec $inclavare_test bash -c "cat <<- EOF >/opt/verdictd/keys/${{ env.UUID }}
        11111111111111111111111111111111
        EOF"
        
        docker exec $inclavare_test bash -c "cat <<- EOF >/root/images/pod.yaml
        metadata:
          attempt: 1
          name: my-podsandbox
          namespace: default
          uid: hdishd83djaidwnduwk28bcsb
        log_directory: /tmp/eaa_test
        linux:
          namespaces:
            options: {}
        EOF"
        
        docker exec $inclavare_test bash -c "cat <<- EOF >/root/images/container.yaml
        metadata:
          name: alpine.enc
        image:
          image: ${{ secrets.TEST_DOCKER_USERNAME }}/${{ env.ENCRYPTED_IMAGE }}-${{ matrix.tag }}:latest
        command:
        - top
        log_path: busybox.0.log
        EOF"
        
        docker exec $inclavare_test bash -c 'rm -fr /etc/containerd/ocicrypt/ocicrypt_keyprovider.conf'
        docker exec $inclavare_test bash -c "cat <<- EOF >/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf
        {
            \"key-providers\": {
                \"eaa\": {
                    \"grpc\": \"127.0.0.1:${{ steps.random-port-generator1.outputs.random-port }}\"
                }
            }
        }
        EOF"

    - name: Launch all Services
      run: |
        docker exec $inclavare_test bash -c 'verdictd --listen 127.0.0.1:${{ steps.random-port-generator2.outputs.random-port }} --gRPC 127.0.0.1:${{ steps.random-port-generator1.outputs.random-port }} --config 127.0.0.1:${{ steps.random-port-generator3.outputs.random-port }}' &
        docker exec $inclavare_test bash -c 'containerd' &

    - name: Generate encrypted container image
      run: |
        docker exec $inclavare_test bash -c 'cd /root/images/ && OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf skopeo copy --insecure-policy --encryption-key provider:eaa:${{ env.UUID }} oci:alpine oci:${{ env.ENCRYPTED_IMAGE }}-${{ matrix.tag }}' 

    - name: Clean up the github workspace
      if: ${{ always() }}
      run:
        docker restart $inclavare_test;
        docker exec $inclavare_test bash -c 'rm -rf /root/inclavare-containers/${{ matrix.tag }}'

    - name: Kill the test container
      run: docker stop $inclavare_test