name: Run rune with crictl

# Controls when the action will run. Triggers the workflow on pull request labeled testing-before-checkin.
on:
  pull_request_target:
    types: labeled

jobs:
  rune_crictl:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'testing-before-checkin') }}
    runs-on: ${{ matrix.sgx }}
    strategy:
      matrix:
        sgx: [[self-hosted, SGX1, commit], [self-hosted, SGX2, commit]]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: refs/pull/${{ github.event.pull_request.number }}/merge

    - name: Prepare work
      run: echo "RUNE_VERSION=$(cat VERSION)" >> $GITHUB_ENV;
        echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV

    - name: Create container
      run: |
        if [ '${{ matrix.sgx }}' = '[self-hosted, SGX1]' ]; then
          rune_test=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 --device /dev/isgx -v $GITHUB_WORKSPACE:/root/inclavare-containers rune-test:centos8.2)
        else
          rune_test=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v /dev/sgx_enclave:/dev/sgx/enclave -v /dev/sgx_provision:/dev/sgx/provision -v $GITHUB_WORKSPACE:/root/inclavare-containers rune-test:centos8.2)
        fi;
        echo "rune_test=$rune_test" >> $GITHUB_ENV

    - uses: ./.github/actions/make-packages
      with:
        container-id: ${{ env.rune_test }}
        os: centos8.2
        version: ${{ env.RUNE_VERSION }}
        cpu_num: ${{ env.CPU_NUM }}
    - run: |
        docker exec $rune_test bash -c 'cd /root/inclavare-containers/centos8.2;
          rpm -ivh rune*.rpm;
          rpm -ivh shim-rune*.rpm'

    - uses: ./.github/actions/start-containerd-daemon
      with:
        container-id: $rune_test
      timeout-minutes: 2

    - name: Run occlum-hello pod
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 20
        max_attempts: 5
        command: docker exec $rune_test bash -c "cd /root/samples && ./clean.sh;
          crictl run --timeout 90s hello.yaml pod.yaml && ./show.sh"
        on_retry_command: echo "******************[RETRY]******************"

    - name: Run dragonwell-web pod
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 20
        max_attempts: 5
        command: docker exec $rune_test bash -c "cd /root/samples && ./clean.sh;
          crictl run --timeout 90s dragonwell.yaml pod.yaml && ./show.sh"
        on_retry_command: echo "******************[RETRY]******************"

    - name: Run openjdk-web pod
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 20
        max_attempts: 5
        command: docker exec $rune_test bash -c "cd /root/samples && ./clean.sh;
          crictl run --timeout 90s jdk.yaml pod.yaml && ./show.sh"
        on_retry_command: echo "******************[RETRY]******************"

    - name: Run golang-web pod
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 20
        max_attempts: 5
        command: docker exec $rune_test bash -c "cd /root/samples && ./clean.sh;
          crictl run --timeout 90s golang.yaml pod.yaml && ./show.sh"
        on_retry_command: echo "******************[RETRY]******************"

    - name: Kill the container
      run: docker stop $rune_test
