name: Run enclave-tls

# Controls when the action will run. Triggers the workflow on pull request labeled testing-before-checkin.
on:
  pull_request_target:
    types: labeled

env:
  ALINUX2_PROTOBUF_C_VERSION: 1.0.2
  ENCLAVE_TLS_BINDIR: /usr/share/enclave-tls/samples
  ENCLAVE_TLS_ROOTDIR: /opt/enclave-tls

jobs:
  rune_enclave_tls:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'testing-before-checkin') }}
    # Openssl 1.1 default installation path in alinux2 is different with ubunut and centos and it is nonstandard path, it will cause encalve-tls building error.
    # It is not a general soltuion to adapt openssl 1.1 default installation path in alinux2 to fix building issue.
    # A long term solution for compatible with openssl 1.0 in alinux2, ubunut, centos is under going.
    # Disable cicd test on alinux2 is a short term workaround. Once overall solution for openssl 1.0 is ready, test based on alinux2 will be enabled.
    runs-on: ${{ matrix.sgx }}
    strategy:
      matrix:
        sgx: [[self-hosted, SGX1, commit], [self-hosted, SGX2, commit]]
       #tag: [ubuntu18.04, centos8.2, alinux2]
        tag: [ubuntu18.04, centos8.2]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: refs/pull/${{ github.event.pull_request.number }}/merge

    - name: Prepare work
      run: echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV;
        echo "RUNE_VERSION=$(grep 'Version:' rune/dist/rpm/rune.spec | awk '{print $2}')" >> $GITHUB_ENV;

    - name: Create inclavare development container
      run: |
        docker pull inclavarecontainers/dev:${{ env.RUNE_VERSION }}-${{ matrix.tag }};
        docker tag inclavarecontainers/dev:${{ env.RUNE_VERSION }}-${{ matrix.tag }} inclavare-dev:${{ matrix.tag }};
        inclavare_dev=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v $GITHUB_WORKSPACE:/root/inclavare-containers inclavare-dev:${{ matrix.tag }});
        echo "inclavare_dev=$inclavare_dev" >> $GITHUB_ENV

    - name: Config git proxy
      run: |
        docker exec $inclavare_dev bash -c 'git config --global http.proxy socks5://localhost:5432'
        docker exec $inclavare_dev bash -c 'git config --global https.proxy socks5://localhost:5432'

    - name: Build and install enclave-tls sdk
      run: docker exec $inclavare_dev bash -c 'cd /root && source /root/.bashrc;
        cp -r inclavare-containers inclavare-containers-$RUNE_VERSION;
        mkdir -p /root/inclavare-containers/${{ matrix.tag }};
        cd inclavare-containers-$RUNE_VERSION/enclave-tls;
        wget https://download.01.org/intel-sgx/sgx-linux/2.13.3/as.ld.objdump.gold.r3.tar.gz;
        tar -xf as.ld.objdump.gold.r3.tar.gz;
        cp -rf external/toolset/${{ matrix.tag }}/* /usr/local/bin/;
        cmake -DENCLAVE_TLS_BUILD_MODE="sgx" -DBUILD_SAMPLES=on -H. -Bbuild;
        make -C build install;
        cp -rf ${{ env.ENCLAVE_TLS_ROOTDIR }} ${{ env.ENCLAVE_TLS_BINDIR }} /root/inclavare-containers/${{ matrix.tag }}'

    - name: Kill the dev container
      run: docker stop $inclavare_dev

    - name: Create runtime testing container
      run: |
        docker pull runetest/enclave-tls-runtime-testing:${{ env.RUNE_VERSION }}-${{ matrix.tag }};
        docker tag runetest/enclave-tls-runtime-testing:${{ env.RUNE_VERSION }}-${{ matrix.tag }} inclavare-test:${{ matrix.tag }};
        if ${{ contains(matrix.sgx, 'SGX2') }}; then
            inclavare_test=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 -v /dev/sgx_enclave:/dev/sgx/enclave -v /dev/sgx_provision:/dev/sgx/provision -v $GITHUB_WORKSPACE:/root/inclavare-containers -v /var/run/aesmd:/var/run/aesmd inclavare-test:${{ matrix.tag }});
        else
            inclavare_test=$(docker run -itd --privileged --rm --net host -e http_proxy=http://127.0.0.1:8118 -e https_proxy=http://127.0.0.1:8118 --device /dev/isgx -v $GITHUB_WORKSPACE:/root/inclavare-containers -v /var/run/aesmd:/var/run/aesmd inclavare-test:${{ matrix.tag }});
        fi;
        echo "inclavare_test=$inclavare_test" >> $GITHUB_ENV

    - name: install enclave-tls
      run: docker exec $inclavare_test bash -c 'mv /root/inclavare-containers/${{ matrix.tag }}/enclave-tls /opt;
        mkdir -p ${{ env.ENCLAVE_TLS_BINDIR }};
        mv /root/inclavare-containers/${{ matrix.tag }}/samples/* ${{ env.ENCLAVE_TLS_BINDIR }};
        cp ${{ env.ENCLAVE_TLS_BINDIR }}/sgx_stub_enclave.signed.so ./'

    - id: random-port-generator1
      uses: ./.github/actions/generate-random-port

    - name: Test enclave tls server for mutual sgx_la
      if: ${{ contains(matrix.sgx, 'SGX2') }}
      run: |
        echo random-port1 ${{ steps.random-port-generator1.outputs.random-port }}
        docker cp /etc/sgx_default_qcnl.conf  $inclavare_test:/etc/
        docker exec $inclavare_test bash -c '${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-server -a sgx_la -v sgx_la -t openssl -c openssl -m -p ${{ steps.random-port-generator1.outputs.random-port }}' &
        docker exec $inclavare_test bash -c 'sleep 10 && ${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-client -l debug -a sgx_la -v sgx_la -t openssl -c openssl -m -p ${{ steps.random-port-generator1.outputs.random-port }}'
        docker restart $inclavare_test

    - id: random-port-generator2
      uses: ./.github/actions/generate-random-port

    - name: Test enclave tls server for mutual sgx_ecdsa
      if: ${{ contains(matrix.sgx, 'SGX2') }}
      run: |
        echo random-port2 ${{ steps.random-port-generator2.outputs.random-port }}
        docker cp /etc/sgx_default_qcnl.conf  $inclavare_test:/etc/
        docker exec $inclavare_test bash -c '${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-server -l debug -a sgx_ecdsa -v sgx_ecdsa -t openssl -c openssl -m -p ${{ steps.random-port-generator2.outputs.random-port }}' &
        docker exec $inclavare_test bash -c 'sleep 10 && ${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-client -l debug -a sgx_ecdsa -v sgx_ecdsa -t openssl -c openssl -m -p ${{ steps.random-port-generator2.outputs.random-port }}'
        docker restart $inclavare_test

    - id: random-port-generator3
      uses: ./.github/actions/generate-random-port

    - name: Test enclave tls server for mutual nullattester and nullverifier instances
      run: |
        echo random-port3 ${{ steps.random-port-generator3.outputs.random-port }}
        docker exec $inclavare_test bash -c '${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-server -a nullattester -v nullverifier -t openssl -c openssl -m -p ${{ steps.random-port-generator3.outputs.random-port }}' &
        docker exec $inclavare_test bash -c 'sleep 10 && ${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-client -l debug -a nullattester -v nullverifier -t openssl -c openssl -m -p ${{ steps.random-port-generator3.outputs.random-port }}'

    - name: Clean up the github workspace
      if: ${{ always() }}
      run:
        docker restart $inclavare_test;
        docker exec $inclavare_test bash -c 'rm -rf /root/inclavare-containers/${{ matrix.tag }}'

    - name: Kill the test container
      run: docker stop $inclavare_test
