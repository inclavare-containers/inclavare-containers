name: 'make_packages'
description: 'make_packages'
inputs:
  container-id:  # id of input
    description: 'The running container id'
    required: true
  os:
    description: 'The system of container'
    required: true
  version:
    description: 'The version of packages'
    required: true
  cpu_num:
    description: 'The cpu_num of machine'
    required: true
runs:
  using: "composite"
  steps:
  - id: make-packages
    run: |
      docker exec ${{ inputs.container-id }} bash -c 'cd /root && source /etc/profile;
          cp -r inclavare-containers inclavare-containers-${{ inputs.version }};
          tar zcf v${{ inputs.version }}.tar.gz inclavare-containers-${{ inputs.version }};
          mkdir -p /root/inclavare-containers/${{ inputs.os }};
          cd inclavare-containers-${{ inputs.version }};
          sed -i 's/inclavared//g' Makefile;
          echo rune shim epm sgx-tools enclave-tls shelter inclavared verdictd | xargs -n 1 cp -v VERSION'

      if [ '${{ inputs.os }}' = 'ubuntu18.04' ]; then
        docker exec ${{ inputs.container-id }} bash -c 'trap "error_handler $?" ERR;
          error_handler() { local err=$?; printf "Cleaning up with exit code $err ...\n"; exit $err; };
          cd inclavare-containers-${{ inputs.version }};
          find ./ -path "*deb/build.sh" | xargs -I files sed -i "17 d" files;
          find ./ -path "*deb/build.sh" | xargs -I files sed -i "17icp /root/v*.tar.gz \$DEBBUILD_DIR" files;
          make package -j${{ inputs.cpu_num }};
          mv *.deb /root/inclavare-containers/${{ inputs.os }}'
      else
        if [ '${{ inputs.os }}' = 'alinux2' ]; then
          docker exec ${{ inputs.container-id }} bash -c 'ln -sv /opt/alibaba/teesdk/intel/sgxsdk /opt/intel/sgxsdk;
            ls -l /opt/intel/sgxsdk;
            sed -i 's/cmake/cmake3/g' inclavare-containers-${{ inputs.version }}/verdictd/dist/rpm/verdictd.spec.in;
            sed -i 's/cmake/cmake3/g' inclavare-containers-${{ inputs.version }}/rats-tls/dist/rpm/rats_tls.spec.in'
        fi
        docker exec ${{ inputs.container-id }} bash -c 'trap "error_handler $?" ERR;
          error_handler() { local err=$?; printf "Cleaning up with exit code $err ...\n"; exit $err; };
          cd inclavare-containers-${{ inputs.version }};
          mkdir -p /root/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS};
          cp -f /root/v${{ inputs.version }}.tar.gz /root/rpmbuild/SOURCES;
          find ./ -path "*dist/Makefile" | xargs -I files sed -i "/wget/d" files;
          find ./ -path "*dist/Makefile" | xargs -I files sed -i "/rm -rf/d" files;
          source /etc/profile && echo $SGX_SDK;
          make package RPMBUILD_DIR=/root/rpmbuild -j${{ inputs.cpu_num }};
          mv *.rpm /root/inclavare-containers/${{ inputs.os }}'
      fi
    shell: bash
